void XMLVisitor::visit(parser::ASTDeclarationNode *decl) {

    // Add initial <decl> tag
    xmlfile << indentation() << "<decl>" << std::endl;

    // Indent
    indentationLevel++;

    // Add identifier
    xmlfile << indentation() << "<id type = \"" + type(decl -> type) + "\">"
            << decl -> identifier << "</id>" << std::endl;

    // Expression tags
    decl -> expr -> accept(this);

    // Unindent
    indentationLevel--;

    // Add closing tag
    xmlfile << indentation() << "</decl>" << std::endl;
}

void XMLVisitor::visit(parser::ASTAssignmentNode *assign) {

    // Add initial <assign> tag
    xmlfile << indentation() << "<assign>" << std::endl;

    // Indent
    indentationLevel++;

    // Add identifier
    xmlfile << indentation() << "<id>" << assign -> identifier << "</id>" << std::endl;

    // Expression tags
    assign -> expr -> accept(this);

    // Unindent
    indentationLevel--;

    // Add closing tag
    xmlfile << indentation() << "</assign>" << std::endl;
}

void XMLVisitor::visit(parser::ASTPrintNode *print){

    // Add initial <print> tag
    xmlfile << indentation() << "<print>" << std::endl;

    // Indent
    indentationLevel++;

    // Expression tags
    print -> expr -> accept(this);

    // Unindent
    indentationLevel--;

    // Add closing tag
    xmlfile << indentation() << "</print>" << std::endl;
}

void XMLVisitor::visit(parser::ASTReturnNode *ret) {

    // Add initial <return> tag
    xmlfile << indentation() << "<return>" << std::endl;

    // Indent
    indentationLevel++;

    // Expression tags
    ret -> expr -> accept(this);

    // Unindent
    indentationLevel--;

    // Add closing tag
    xmlfile << indentation() << "</return>" << std::endl;
}

void XMLVisitor::visit(parser::ASTBlockNode *block) {

    // Add initial <block> tag
    xmlfile << indentation() << "<block>" << std::endl;

    // Indent
    indentationLevel++;

    // For each statement, accept
    for(auto &statement : block -> statements)
        statement -> accept(this);

    // Unindent
    indentationLevel--;

    // Add closing tag
    xmlfile << indentation() << "</block>" << std::endl;
}

void XMLVisitor::visit(parser::ASTIfNode *ifnode) {

    // Add initial <if> tag
    xmlfile << indentation() << "<if>" << std::endl;

    // Indent
    indentationLevel++;

    // Add <condition> tag
    xmlfile << indentation() << "<condition>" << std::endl;

    // Indent
    indentationLevel++;

    // Expression
    ifnode -> condition -> accept(this);

    // Unindent
    indentationLevel--;

    // Add closing tag
    xmlfile << indentation() << "</condition>" << std::endl;

    // Add <if-block> tag
    xmlfile << indentation() << "<if-block>" << std::endl;

    // Indent
    indentationLevel++;

    // If-block
    ifnode -> if_block -> accept(this);

    // Unindent
    indentationLevel--;

    // Add closing tag
    xmlfile << indentation() << "</if-block>" << std::endl;

    // Unindent
    indentationLevel--;

    // If there is an else-block
    if(ifnode->else_block){

        // Add <else-block> tag
        xmlfile << indentation() << "<else-block>" << std::endl;

        // Indent
        indentationLevel++;

        // Else-block
        ifnode -> else_block -> accept(this);

        // Unindent
        indentationLevel--;

        // Add closing tag
        xmlfile << indentation() << "</else-block>" << std::endl;
    }

    // Add closing tag
    xmlfile << indentation() << "</if>" << std::endl;
}

void XMLVisitor::visit(parser::ASTWhileNode *whilenode) {

    // Add initial <while> tag
    xmlfile << indentation() << "<while>" << std::endl;

    // Indent
    indentationLevel++;

    // Add <condition> tag
    xmlfile << indentation() << "<condition>" << std::endl;

    // Indent
    indentationLevel++;

    // Expression
    whilenode -> condition -> accept(this);

    // Unindent
    indentationLevel--;

    // Add closing tag
    xmlfile << indentation() << "</condition>" << std::endl;

    // while-block
    whilenode -> block -> accept(this);

    // Unindent
    indentationLevel--;

    // Add closing tag
    xmlfile << indentation() << "</while>" << std::endl;
}

void XMLVisitor::visit(parser::ASTFunctionDefinitionNode *func) {

    // Add initial <func-def> tag
    xmlfile << indentation() << "<func-def type = \"" + type(func->type) +
                                "\">" << std::endl;

    // Indent
    indentationLevel++;

    // Function identifier
    xmlfile << indentation() << "<id>" + func->identifier + "</id>" << std::endl;

    // For each parameter
    for(auto &param : func -> parameters){
        xmlfile << indentation() << "<param type = \"" + type(param.second) +
                                    "\">" + param.first + "</param>" << std::endl;
    }

    // Function body
    func -> block -> accept(this);

    // Unindent
    indentationLevel--;

    // Add closing tag
    xmlfile << indentation() << "</func-def>" << std::endl;

}

void XMLVisitor::visit(parser::ASTLiteralNode<std::string> *lit) {

    // Add initial <string> tag
    xmlfile << indentation() << "<string>";

    // Add value
    xmlfile << lit->val;

    // Add closing tag
    xmlfile << "</string>" << std::endl;
}

void XMLVisitor::visit(parser::ASTBinaryExprNode *bin) {

    // Add initial <bin> tag
    xmlfile << indentation() << "<bin op = \"" + xmlSafeOp(bin->op) +
                                "\">" << std::endl;

    // Indent
    indentationLevel++;

    // Left node
    bin -> left -> accept(this);

    // Right node
    bin -> right -> accept(this);

    // Unindent
    indentationLevel--;

    // Add closing tag
    xmlfile << indentation() << "</bin>" << std::endl;
}

void XMLVisitor::visit(parser::ASTIdentifierNode *id) {

    // Add initial <id> tag
    xmlfile << indentation() << "<id>";

    // Add value
    xmlfile << id -> identifier;

    // Add closing tag
    xmlfile << "</id>" << std::endl;

}

void XMLVisitor::visit(parser::ASTUnaryExprNode *un) {

    // Add initial <unary> tag
    xmlfile << indentation() << "<unary op = \"" + un -> unary_op + "\">"
            << std::endl;

    // Indent
    indentationLevel++;

    // Value
    un -> expr -> accept(this);

    // Unindent
    indentationLevel--;

    // Add closing tag
    xmlfile << indentation() << "</unary>" << std::endl;
}

void XMLVisitor::visit(parser::ASTFunctionCallNode *func) {

    // Add initial <func-call> tag
    xmlfile << indentation() << "<func-call>" << std::endl;

    // Indent
    indentationLevel++;

    // Function identifier
    xmlfile << indentation() << "<id>" + func->identifier + "</id>" << std::endl;

    // For each parameter
    for(auto &param : func -> parameters){
        xmlfile << indentation() << "<arg>" << std::endl;

        // Indent
        indentationLevel++;

        // Parameter
        param->accept(this);

        // Unindent
        indentationLevel++;

        xmlfile << indentation() << "</arg>" << std::endl;
    }

    // Unindent
    indentationLevel--;

    // Add closing tag
    xmlfile << indentation() << "</func-call>" << std::endl;
}
